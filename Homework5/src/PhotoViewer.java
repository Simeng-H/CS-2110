
/**
* Homework 5 <br>
* Simeng Hao, sh4aj <br>
* Source: Official documentation, Eclipse WindowBuilder <br>
* <br>
* This is the second version of my code for this assignment, <br>
* where WindowBuilder was used solely for the purpose of instantly visualizing <br> 
* changes in parameters, some code were generated by the WindowBuilder just so <br>
* the WindowBuilder is able to parse them. <br>
* <br> 
* The first version of this was done without any automatically generated code, <br>
* and the source file has been included in a separate folder.
*/

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

public class PhotoViewer extends JFrame {

    private static final long serialVersionUID = 1L;

    /** where all the photos are coming from */
    private PhotographContainer imageAlbum;
    /** the photos of imageAlbum */
    private ArrayList<Photograph> photos;
    /** the index of the current displayed photo */
    private int currentPhotoIndex = 0;
    /** the photo currently displayed */
    private Photograph currentPhoto;

    private HashMap<Photograph, ImageIcon> photoToThumbnailsImgIcon = new HashMap<>();
    private HashMap<Photograph, ImageIcon> photoToDisplayImgIcon = new HashMap<>();

    /** the label used to display photo */
    private JLabel lblDisplay;
    /** the labels of the thumbnails panel, in top-down order */
    private ArrayList<JLabel> lblThumbnails = new ArrayList<>();

    /**
     * Launch the application.
     */
    public static void main(String[] args) {

        PhotoViewer myViewer = new PhotoViewer();

        // set up photos
        ArrayList<Photograph> photos = new ArrayList<>();
        Photograph p1 = new Photograph("./images/1.jpg", "Drone", "2010-01-01", 1);
        Photograph p2 = new Photograph("./images/2.jpg", "Phone", "2011-02-02", 2);
        Photograph p3 = new Photograph("./images/3.jpg", "Voyage", "2013-03-03", 3);
        Photograph p4 = new Photograph("./images/4.jpg", "Portait", "2014-04-04", 4);
        Photograph p5 = new Photograph("./images/5.jpg", "Fried", "2015-05-05", 5);
        photos.add(p2);
        photos.add(p1);
        photos.add(p3);
        photos.add(p4);
        photos.add(p5);
        myViewer.addPhotos(photos);

        // myViewer.createAndShowGUI();

        EventQueue.invokeLater(() -> {
            try {
                myViewer.createAndShowGUI();
                myViewer.setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
            }

        });
    }

    /**
     * Create the application.
     */
    public PhotoViewer() {
        imageAlbum = new Album("");
    }

    /**
     * Initialize the contents of the frame.
     * 
     * @wbp.parser.entryPoint
     */
    private void createAndShowGUI() {
        photos = imageAlbum.getPhotos();

        //frame setup
        // frame = new JFrame();
        setBounds(100, 100, 1000, 700);
        setMinimumSize(new Dimension(750, 450));
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        GridBagLayout gridBagLayout = new GridBagLayout();
        gridBagLayout.columnWidths = new int[] { 400, 600 };
        gridBagLayout.rowHeights = new int[] { 50, 600, 50 };
        gridBagLayout.columnWeights = new double[] { 0.0, 1.0 };
        gridBagLayout.rowWeights = new double[] { 0.0, 1.0, 0.0 };
        getContentPane().setLayout(gridBagLayout);
        addComponentListener(new ComponentAdapter() {
            @Override
            /**
             * resize the displayed photo when the window is resized, slow but works.
             */
            public void componentResized(ComponentEvent e) {
                try {
                    GridBagLayout g = (GridBagLayout) getContentPane().getLayout();
                    System.out.println(g.getLayoutDimensions()[0][1]);
                    setUpDisplayImgIcons(g.getLayoutDimensions()[0][1] - 50, g.getLayoutDimensions()[1][1] - 50);
                    updateLblDisplay();
                } catch (Exception ecp) {
                    ecp.printStackTrace();
                }
            }
        });


        // prepares thumbnail icons and set sizes
        setUpThumbnailsImgIcons(200, 10000);
        currentPhoto = photos.get(currentPhotoIndex);

        // toolbar setuo
        JPanel toolBar = new JPanel();
        GridBagConstraints gbc_toolBar = new GridBagConstraints();
        gbc_toolBar.insets = new Insets(0, 0, 5, 0);
        gbc_toolBar.gridwidth = 2;
        gbc_toolBar.fill = GridBagConstraints.BOTH;
        gbc_toolBar.gridx = 0;
        gbc_toolBar.gridy = 0;
        getContentPane().add(toolBar, gbc_toolBar);
        toolBar.setLayout(new GridLayout(1, 6, 0, 0));

        // exit button setup
        JButton btnExit = new JButton("Exit");
        btnExit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
        toolBar.add(btnExit);

        // prev button setup
        JButton btnPrev = new JButton("Prev");
        btnPrev.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                cyclePhotoIndex(false);
                updateLblDisplay();
            }
        });
        toolBar.add(btnPrev);

        // next button setup
        JButton btnNext = new JButton("Next");
        btnNext.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                cyclePhotoIndex(true);
                updateLblDisplay();
            }
        });
        toolBar.add(btnNext);

        // sort by date button setup
        JButton btnSortByDate = new JButton("Sort by date");
        btnSortByDate.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Collections.sort(photos);
                currentPhotoIndex = photos.indexOf(currentPhoto);
                updateLblThumbnails();
            }
        });
        toolBar.add(btnSortByDate);

        // sort by caption button setup
        JButton btnSortByCaption = new JButton("Sort by caption");
        btnSortByCaption.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Collections.sort(photos, new CompareByCaption());
                currentPhotoIndex = photos.indexOf(currentPhoto);
                updateLblThumbnails();
            }
        });
        toolBar.add(btnSortByCaption);

        // sort by rating button setup
        JButton btnSortByRating = new JButton("Sort by rating");
        btnSortByRating.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Collections.sort(photos, new CompareByRating());
                currentPhotoIndex = photos.indexOf(currentPhoto);
                updateLblThumbnails();
            }
        });
        toolBar.add(btnSortByRating);

        // thumbnails scrollpane setup
        JScrollPane scpThumbnails = new JScrollPane();
        GridBagConstraints gbc_scpThumbnails = new GridBagConstraints();
        gbc_scpThumbnails.fill = GridBagConstraints.BOTH;
        gbc_scpThumbnails.gridheight = 2;
        gbc_scpThumbnails.insets = new Insets(0, 0, 5, 5);
        gbc_scpThumbnails.gridx = 0;
        gbc_scpThumbnails.gridy = 1;
        getContentPane().add(scpThumbnails, gbc_scpThumbnails);

        // thumbnails panel setup
        JPanel pnlThumbnails = new JPanel();
        scpThumbnails.setViewportView(pnlThumbnails);
        pnlThumbnails.setLayout(new GridLayout(photos.size(), 1, 0, 0));

        // setup and add thumbnail labels
        lblThumbnails = new ArrayList<>();
        for (Photograph p : photos) {
            JLabel lblThumbnail = new JLabel();
            lblThumbnail.setText(p.createHtmlString());
            lblThumbnail.setIcon(photoToThumbnailsImgIcon.get(p));
            lblThumbnail.setHorizontalTextPosition(JLabel.RIGHT);
            lblThumbnail.setVerticalTextPosition(JLabel.CENTER);
            lblThumbnail.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    int indexOfLabel = lblThumbnails.indexOf(e.getSource());
                    currentPhotoIndex = indexOfLabel;
                    updateLblDisplay();
                }
            });
            lblThumbnails.add(lblThumbnail);
            pnlThumbnails.add(lblThumbnail);
        }

        // set up lable to display photo
        JLabel lblDisplay = new JLabel("");
        this.lblDisplay = lblDisplay;
        lblDisplay.setIcon(photoToDisplayImgIcon.get(currentPhoto));
        GridBagConstraints gbc_lblDisplay = new GridBagConstraints();
        gbc_lblDisplay.insets = new Insets(0, 0, 5, 0);
        gbc_lblDisplay.gridx = 1;
        gbc_lblDisplay.gridy = 1;
        getContentPane().add(lblDisplay, gbc_lblDisplay);

        // rater panel setup
        JPanel pnlRater = new JPanel();
        GridBagConstraints gbc_pnlRater = new GridBagConstraints();
        gbc_pnlRater.fill = GridBagConstraints.BOTH;
        gbc_pnlRater.gridx = 1;
        gbc_pnlRater.gridy = 2;
        getContentPane().add(pnlRater, gbc_pnlRater);
        pnlRater.setLayout(new GridLayout(1, 6, 0, 0));
        JLabel lblRating = new JLabel("Rating: ");
        lblRating.setHorizontalAlignment(JLabel.RIGHT);
        pnlRater.add(lblRating);

        // setup and add rater buttons
        for (int i = 1; i <= 5; i++) {
            JButton btnRating = new JButton(String.valueOf(i));
            btnRating.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    JButton clicked = (JButton) e.getSource();
                    int newRating = Integer.valueOf(clicked.getText());
                    currentPhoto.setRating(newRating);
                    lblThumbnails.get(currentPhotoIndex).setText(currentPhoto.createHtmlString());
                }
            });
            pnlRater.add(btnRating);
        }

    }

    /**
     * @param width the width of the display label
     * @param height the height of the display label
     */
    private void setUpDisplayImgIcons(int width, int height) {
        photoToDisplayImgIcon = createPhotoToImgIconMap(width, height);
    }

    /**
     * @param width the width of a thumbnail label
     * @param height the height of a thumbnail label
     */
    private void setUpThumbnailsImgIcons(int width, int height) {
        photoToThumbnailsImgIcon = createPhotoToImgIconMap(width, height);
    }

    /**
     * use this.photos to create an arraylist of ImageIcons suiting the specified size, without changing the aspect rario of the original photo.
     * To specify only one property and not the other, use a very large value for the other property.
     * @param width
     * @param height
     * @return
     */
    private HashMap<Photograph,ImageIcon> createPhotoToImgIconMap(int width, int height) {
        HashMap<Photograph,ImageIcon> h = new HashMap<>();
        for (Photograph p : photos) {
            ImageIcon i = createImgIconFromPhoto(p, width, height);
            h.put(p, i);
        }
        return h;
    }

    /**
     * generate an image icon from a Photograph and resize it without changing the aspect ratio
     * @param p the original Photograph
     * @param width the target width
     * @param height the target height
     * @return an ImageIcon generated based on p no wider than width and no higher than height
     */
    private ImageIcon createImgIconFromPhoto(Photograph p, int width, int height) {
        ImageIcon icon = new ImageIcon(p.getImagefile().getPath());
        resizeIconProportionately(icon, width, height);
        return icon;
    }

    /**
     * resize imgIcon to fit in a rectangle of desired size without changing it's
     * aspect ratio
     */
    private void resizeIconProportionately(ImageIcon targetIcon, int newWidth, int newHeight) {
        double widthProportion = (double) newWidth / targetIcon.getIconWidth();
        double heightProportion = (double) newHeight / targetIcon.getIconHeight();
        double scaleCoefficient = widthProportion < heightProportion ? widthProportion : heightProportion;
        scaleImgIcon(targetIcon, scaleCoefficient);
    }

    /**
     * scales an ImageIcon by multiplying its dimensions by scaleCoefficient
     */
    private void scaleImgIcon(ImageIcon imgIcon, double scaleCoefficient) {
        Image img = imgIcon.getImage();
        int newWidth = (int) (imgIcon.getIconWidth() * scaleCoefficient);
        int newHeight = (int) (imgIcon.getIconHeight() * scaleCoefficient);
        Image newImg = img.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
        imgIcon.setImage(newImg);
    }

    /**
     * adds an Arraylist of Photograph to this.imageAlbum
     * @param photosToAdd
     */
    private void addPhotos(ArrayList<Photograph> photosToAdd) {
        for (Photograph p : photosToAdd) {
            this.imageAlbum.addPhoto(p);
        }
    }

    /**
     * cycles the currentPhotoIndex by one, returns to the largest legal index when goes below 0, and 0 when goes above the largest legal index.
     * @param next index++ if true, index-- if false;
     */
    private void cyclePhotoIndex(boolean next) {
        int newIndex = this.currentPhotoIndex;
        if (next) {
            newIndex += 1;
        } else {
            newIndex -= 1;
        }
        newIndex = Math.floorMod(newIndex, this.imageAlbum.getPhotos().size());
        this.currentPhotoIndex = newIndex;
    }

    private void updateLblDisplay() {
        currentPhoto = photos.get(currentPhotoIndex);
        lblDisplay.setIcon(photoToDisplayImgIcon.get(currentPhoto));
    }

    /** update each thumbnail label so as to display photos and information in orders corresponding to that of this.photos */
    private void updateLblThumbnails() {
        for (int i = 0; i < photos.size(); i++) {
            JLabel l = lblThumbnails.get(i);
            Photograph p = photos.get(i);
            l.setIcon(photoToThumbnailsImgIcon.get(p));
            l.setText(p.createHtmlString());
        }
    }
}
